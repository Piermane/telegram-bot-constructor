const express = require('express');
const router = express.Router();
const fs = require('fs').promises;
const path = require('path');
const { spawn, exec } = require('child_process');
const https = require('https');
const { generateAdvancedPythonBot } = require('../utils/advanced-bot-generator');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
const runningBots = new Map();

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API
 */
async function validateBotToken(token) {
  return new Promise((resolve) => {
    const url = `https://api.telegram.org/bot${token}/getMe`;
    
    https.get(url, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          if (result.ok && result.result) {
            resolve({
              valid: true,
              botInfo: result.result
            });
          } else {
            resolve({ valid: false, error: result.description || '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
          }
        } catch (error) {
          resolve({ valid: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞' });
        }
      });
    }).on('error', () => {
      resolve({ valid: false, error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram' });
    });
  });
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ù–ê–°–¢–û–Ø–©–ï–ì–û –±–æ—Ç–∞
 */
router.post('/create', async (req, res) => {
  try {
    const { botSettings } = req.body;

    if (!botSettings || !botSettings.name || !botSettings.token) {
      return res.status(400).json({ 
        success: false, 
        message: '–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    console.log('üöÄ –°–æ–∑–¥–∞–µ–º –ù–ê–°–¢–û–Ø–©–ï–ì–û –±–æ—Ç–∞:', botSettings.name);

    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –¢–û–ö–ï–ù —á–µ—Ä–µ–∑ Telegram API
    const tokenValidation = await validateBotToken(botSettings.token);
    if (!tokenValidation.valid) {
      return res.status(400).json({
        success: false,
        message: `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: ${tokenValidation.error}`
      });
    }

    const botInfo = tokenValidation.botInfo;
    console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω! –ë–æ—Ç:', botInfo.username);

    // 2. –°–û–ó–î–ê–ï–ú –î–ò–†–ï–ö–¢–û–†–ò–Æ –¥–ª—è –±–æ—Ç–∞
    const botId = `bot_${Date.now()}`;
    const botDir = path.join(__dirname, '../../deployed_bots', botId);
    await fs.mkdir(botDir, { recursive: true });

    // 3. –ì–ï–ù–ï–†–ò–†–£–ï–ú –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Python –∫–æ–¥ –±–æ—Ç–∞
    const pythonCode = generateAdvancedPythonBot(botSettings, botInfo);

    await fs.writeFile(path.join(botDir, 'bot.py'), pythonCode);

    // 4. –°–û–ó–î–ê–ï–ú requirements.txt
    await fs.writeFile(path.join(botDir, 'requirements.txt'), 'python-telegram-bot==20.7');

    // 5. –ó–ê–ü–£–°–ö–ê–ï–ú –±–æ—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...');
    const botProcess = spawn('python3', ['bot.py'], {
      cwd: botDir,
      detached: true,
      stdio: ['ignore', 'pipe', 'pipe']
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –±–æ—Ç–∞
    botProcess.stdout.on('data', (data) => {
      console.log(`[${botInfo.username}] ${data.toString()}`);
    });

    botProcess.stderr.on('data', (data) => {
      console.error(`[${botInfo.username}] ERROR: ${data.toString()}`);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º –±–æ—Ç–µ
    runningBots.set(botId, {
      process: botProcess,
      dir: botDir,
      name: botSettings.name,
      username: botInfo.username,
      token: botSettings.token,
      settings: botSettings,
      startedAt: new Date(),
      pid: botProcess.pid
    });

    botProcess.unref();

    console.log(`‚úÖ –ë–æ—Ç ${botInfo.username} –∑–∞–ø—É—â–µ–Ω! PID: ${botProcess.pid}`);

    // 6. –í–û–ó–í–†–ê–©–ê–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    res.status(201).json({
      success: true,
      message: '–ù–ê–°–¢–û–Ø–©–ò–ô –±–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω!',
      bot: {
        id: botId,
        name: botSettings.name,
        username: botInfo.username,
        status: 'running',
        url: `https://t.me/${botInfo.username}`,
        realBot: true,
        deployedAt: new Date().toISOString(),
        scenes: botSettings.scenes?.length || 0,
        features: Object.values(botSettings.features || {}).filter(Boolean).length,
        pid: botProcess.pid,
        directory: botDir
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: ${error.message}`
    });
  }
});

/**
 * –°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
 */
router.get('/list', async (req, res) => {
  try {
    const botsList = Array.from(runningBots.entries()).map(([id, info]) => ({
      id,
      name: info.name,
      username: info.username,
      status: 'running',
      url: `https://t.me/${info.username}`,
      startedAt: info.startedAt,
      pid: info.pid,
      scenes: info.settings.scenes?.length || 0,
      settings: info.settings // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }));

    res.json({
      success: true,
      bots: botsList,
      total: botsList.length
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤'
    });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
 */
router.get('/:botId/settings', async (req, res) => {
  try {
    const { botId } = req.params;
    const botInfo = runningBots.get(botId);

    if (!botInfo) {
      return res.status(404).json({
        success: false,
        message: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      settings: botInfo.settings
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞'
    });
  }
});

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Hot Reload)
 */
router.put('/:botId/update', async (req, res) => {
  try {
    const { botId } = req.params;
    const { botSettings } = req.body;
    const botInfo = runningBots.get(botId);

    if (!botInfo) {
      return res.status(404).json({
        success: false,
        message: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞:', botId);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è)
    if (botSettings.token !== botInfo.settings.token) {
      const tokenValidation = await validateBotToken(botSettings.token);
      if (!tokenValidation.valid) {
        return res.status(400).json({
          success: false,
          message: `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: ${tokenValidation.error}`
        });
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –±–æ—Ç–∞
    const botInfoForGeneration = {
      username: botInfo.username,
      ...botInfo
    };
    const newPythonCode = generateAdvancedPythonBot(botSettings, botInfoForGeneration);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    await fs.writeFile(path.join(botInfo.dir, 'bot.py'), newPythonCode);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    try {
      process.kill(botInfo.process.pid, 'SIGTERM');
    } catch (e) {
      console.log('–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    const newBotProcess = spawn('python3', ['bot.py'], {
      cwd: botInfo.dir,
      detached: true,
      stdio: ['ignore', 'pipe', 'pipe']
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
    newBotProcess.stdout.on('data', (data) => {
      console.log(`[${botInfo.username}] ${data.toString()}`);
    });

    newBotProcess.stderr.on('data', (data) => {
      console.error(`[${botInfo.username}] ERROR: ${data.toString()}`);
    });

    newBotProcess.unref();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    runningBots.set(botId, {
      ...botInfo,
      process: newBotProcess,
      settings: botSettings,
      pid: newBotProcess.pid,
      updatedAt: new Date()
    });

    console.log(`üîÑ –ë–æ—Ç ${botInfo.username} –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤—ã–π PID: ${newBotProcess.pid}`);

    res.json({
      success: true,
      message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!',
      bot: {
        id: botId,
        name: botSettings.name,
        username: botInfo.username,
        status: 'running',
        pid: newBotProcess.pid,
        updatedAt: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: ${error.message}`
    });
  }
});

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
 */
router.delete('/stop/:botId', async (req, res) => {
  try {
    const { botId } = req.params;
    const botInfo = runningBots.get(botId);

    if (!botInfo) {
      return res.status(404).json({
        success: false,
        message: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞:', botInfo.username);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    try {
      process.kill(botInfo.process.pid, 'SIGTERM');
      console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ ${botInfo.username} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (PID: ${botInfo.process.pid})`);
    } catch (e) {
      console.log('–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö
    runningBots.delete(botId);

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –±–æ—Ç–∞
    try {
      await fs.rm(botInfo.dir, { recursive: true, force: true });
      console.log(`‚úÖ –§–∞–π–ª—ã –±–æ—Ç–∞ ${botInfo.username} —É–¥–∞–ª–µ–Ω—ã`);
    } catch (e) {
      console.log('–§–∞–π–ª—ã —É–∂–µ —É–¥–∞–ª–µ–Ω—ã');
    }

    res.json({
      success: true,
      message: `–ë–æ—Ç ${botInfo.username} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω`
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: `–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: ${error.message}`
    });
  }
});

module.exports = router;