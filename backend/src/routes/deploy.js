const express = require('express');
const router = express.Router();
const fs = require('fs').promises;
const path = require('path');
const { spawn, exec } = require('child_process');
const https = require('https');
const { generateAdvancedPythonBot } = require('../utils/advanced-bot-generator');
const { generateWebAppHTML } = require('../utils/webapp-generator');
const db = require('../utils/database');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è runtime, –¥–∞–Ω–Ω—ã–µ –≤ –ë–î)
const runningBots = new Map();

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
 */
async function restoreRunningBots() {
  try {
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'running'
    const result = await db.query(
      "SELECT id, name, token, config, status FROM bots WHERE status = 'running'"
    );
    
    for (const botRecord of result.rows) {
      const botId = `bot_${botRecord.id}`;
      const botDir = path.join(__dirname, '../../deployed_bots', botId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–æ—Ç–∞
      try {
        await fs.access(botDir);
      } catch {
        console.log(`‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–æ—Ç–∞ ${botRecord.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await db.query('UPDATE bots SET status = $1 WHERE id = $2', ['stopped', botRecord.id]);
        continue;
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
      console.log(`ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞: ${botRecord.name}`);
      const botProcess = spawn('python3', ['bot.py'], {
        cwd: botDir,
        detached: true,
        stdio: ['ignore', 'pipe', 'pipe']
      });
      
      botProcess.stdout.on('data', (data) => {
        console.log(`[${botRecord.name}] ${data.toString()}`);
      });
      
      botProcess.stderr.on('data', (data) => {
        console.error(`[${botRecord.name}] ERROR: ${data.toString()}`);
      });
      
      botProcess.on('exit', async (code) => {
        console.log(`[${botRecord.name}] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
        runningBots.delete(botId);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await db.query('UPDATE bots SET status = $1 WHERE id = $2', ['stopped', botRecord.id]);
      });
      
      runningBots.set(botId, {
        process: botProcess,
        dbId: botRecord.id,
        dir: botDir,
        name: botRecord.name,
        token: botRecord.token,
        settings: botRecord.config,
        pid: botProcess.pid
      });
      
      botProcess.unref();
      
      console.log(`‚úÖ –ë–æ—Ç ${botRecord.name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! PID: ${botProcess.pid}`);
    }
    
    console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –±–æ—Ç–æ–≤: ${result.rows.length}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–≤:', error);
  }
}

// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
setTimeout(() => restoreRunningBots(), 2000);

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API
 */
async function validateBotToken(token) {
  return new Promise((resolve) => {
    const url = `https://api.telegram.org/bot${token}/getMe`;
    
    https.get(url, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          if (result.ok && result.result) {
            resolve({
              valid: true,
              botInfo: result.result
            });
          } else {
            resolve({ valid: false, error: result.description || '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
          }
        } catch (error) {
          resolve({ valid: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞' });
        }
      });
    }).on('error', () => {
      resolve({ valid: false, error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram' });
    });
  });
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
 */
router.post('/create', async (req, res) => {
  try {
    const { botSettings } = req.body;

    if (!botSettings || !botSettings.name || !botSettings.token) {
      return res.status(400).json({ 
        success: false, 
        message: '–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    console.log('üöÄ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞:', botSettings.name);

    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –¢–û–ö–ï–ù —á–µ—Ä–µ–∑ Telegram API
    const tokenValidation = await validateBotToken(botSettings.token);
    if (!tokenValidation.valid) {
      return res.status(400).json({
        success: false,
        message: `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: ${tokenValidation.error}`
      });
    }

    const botInfo = tokenValidation.botInfo;
    console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω! –ë–æ—Ç:', botInfo.username);

    // 2. –°–û–•–†–ê–ù–Ø–ï–ú –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const dbResult = await db.query(
      `INSERT INTO bots (user_id, name, token, description, config, status, telegram_username)
       VALUES ($1, $2, $3, $4, $5, $6, $7)
       RETURNING id`,
      [1, botSettings.name, botSettings.token, botSettings.description || '', JSON.stringify(botSettings), 'running', botInfo.username]
    );
    
    const dbId = dbResult.rows[0].id;
    const botId = `bot_${dbId}`;

    // 3. –°–û–ó–î–ê–ï–ú –î–ò–†–ï–ö–¢–û–†–ò–Æ –¥–ª—è –±–æ—Ç–∞
    const botDir = path.join(__dirname, '../../deployed_bots', botId);
    await fs.mkdir(botDir, { recursive: true });

    // 4. –ì–ï–ù–ï–†–ò–†–£–ï–ú Python –∫–æ–¥ –±–æ—Ç–∞
    const pythonCode = generateAdvancedPythonBot(botSettings, botInfo);
    await fs.writeFile(path.join(botDir, 'bot.py'), pythonCode);

    // 5. –°–û–ó–î–ê–ï–ú requirements.txt
    await fs.writeFile(path.join(botDir, 'requirements.txt'), 'python-telegram-bot==20.7');

    // 6. –ì–ï–ù–ï–†–ò–†–£–ï–ú WebApp –¥–ª—è –±–æ—Ç–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω WebApp —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
    if (botSettings.features && botSettings.features.webApp) {
      const webAppDir = path.join(botDir, 'webapp');
      await fs.mkdir(webAppDir, { recursive: true });
      
      const webAppHTML = generateWebAppHTML(botSettings, botId);
      await fs.writeFile(path.join(webAppDir, 'index.html'), webAppHTML);
      
      console.log('üì± WebApp —Å–æ–∑–¥–∞–Ω –¥–ª—è –±–æ—Ç–∞');
    }

    // 7. –°–û–•–†–ê–ù–Ø–ï–ú –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    await fs.writeFile(
      path.join(botDir, 'settings.json'),
      JSON.stringify(botSettings, null, 2)
    );

    // 7. –ó–ê–ü–£–°–ö–ê–ï–ú –±–æ—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...');
    const botProcess = spawn('python3', ['bot.py'], {
      cwd: botDir,
      detached: true,
      stdio: ['ignore', 'pipe', 'pipe']
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –±–æ—Ç–∞
    botProcess.stdout.on('data', (data) => {
      console.log(`[${botInfo.username}] ${data.toString()}`);
    });

    botProcess.stderr.on('data', (data) => {
      console.error(`[${botInfo.username}] ERROR: ${data.toString()}`);
    });
    
    botProcess.on('exit', async (code) => {
      console.log(`[${botInfo.username}] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
      runningBots.delete(botId);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
      await db.query('UPDATE bots SET status = $1 WHERE id = $2', ['stopped', dbId]);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º –±–æ—Ç–µ
    runningBots.set(botId, {
      process: botProcess,
      dbId: dbId,
      dir: botDir,
      name: botSettings.name,
      username: botInfo.username,
      token: botSettings.token,
      settings: botSettings,
      startedAt: new Date(),
      pid: botProcess.pid
    });

    botProcess.unref();

    console.log(`‚úÖ –ë–æ—Ç ${botInfo.username} –∑–∞–ø—É—â–µ–Ω! PID: ${botProcess.pid}`);

    // 8. –í–û–ó–í–†–ê–©–ê–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    res.status(201).json({
      success: true,
      message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω!',
      bot: {
        id: botId,
        dbId: dbId,
        name: botSettings.name,
        username: botInfo.username,
        status: 'running',
        url: `https://t.me/${botInfo.username}`,
        deployedAt: new Date().toISOString(),
        scenes: botSettings.scenes?.length || 0,
        features: Object.values(botSettings.features || {}).filter(Boolean).length,
        pid: botProcess.pid,
        directory: botDir
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: ${error.message}`
    });
  }
});

/**
 * –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –∏–∑ –ë–î
 */
router.get('/list', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–æ—Ç—ã –∏–∑ –ë–î
    const result = await db.query(
      'SELECT id, name, telegram_username, description, status, config, created_at, started_at FROM bots ORDER BY created_at DESC'
    );
    
    const botsList = result.rows.map(bot => {
      const botId = `bot_${bot.id}`;
      const runningInfo = runningBots.get(botId);
      
      return {
        id: botId,
        dbId: bot.id,
        name: bot.name,
        username: bot.telegram_username,
        description: bot.description,
        status: bot.status,
        url: `https://t.me/${bot.telegram_username}`,
        createdAt: bot.created_at,
        startedAt: bot.started_at || bot.created_at, // –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        pid: runningInfo?.pid,
        scenes: bot.config?.scenes?.length || 0,
        settings: bot.config // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      };
    });

    res.json({
      success: true,
      bots: botsList,
      total: botsList.length
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤'
    });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
 */
router.get('/:botId/settings', async (req, res) => {
  try {
    const { botId } = req.params;
    const botInfo = runningBots.get(botId);

    if (!botInfo) {
      return res.status(404).json({
        success: false,
        message: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      settings: botInfo.settings
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞'
    });
  }
});

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î (Hot Reload)
 */
router.put('/:botId/update', async (req, res) => {
  try {
    const { botId } = req.params;
    const { botSettings } = req.body;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º DB ID –∏–∑ botId
    const dbId = parseInt(botId.replace('bot_', ''));
    const botInfo = runningBots.get(botId);

    if (!botInfo) {
      return res.status(404).json({
        success: false,
        message: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞:', botId);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è)
    if (botSettings.token !== botInfo.token) {
      const tokenValidation = await validateBotToken(botSettings.token);
      if (!tokenValidation.valid) {
        return res.status(400).json({
          success: false,
          message: `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: ${tokenValidation.error}`
        });
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    await db.query(
      'UPDATE bots SET name = $1, description = $2, config = $3, token = $4, updated_at = NOW() WHERE id = $5',
      [botSettings.name, botSettings.description || '', JSON.stringify(botSettings), botSettings.token, dbId]
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –±–æ—Ç–∞
    const botInfoForGeneration = {
      username: botInfo.username,
      ...botInfo
    };
    const newPythonCode = generateAdvancedPythonBot(botSettings, botInfoForGeneration);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await fs.writeFile(path.join(botInfo.dir, 'bot.py'), newPythonCode);
    await fs.writeFile(
      path.join(botInfo.dir, 'settings.json'),
      JSON.stringify(botSettings, null, 2)
    );

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    try {
      process.kill(botInfo.process.pid, 'SIGTERM');
    } catch (e) {
      console.log('–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    const newBotProcess = spawn('python3', ['bot.py'], {
      cwd: botInfo.dir,
      detached: true,
      stdio: ['ignore', 'pipe', 'pipe']
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
    newBotProcess.stdout.on('data', (data) => {
      console.log(`[${botInfo.username}] ${data.toString()}`);
    });

    newBotProcess.stderr.on('data', (data) => {
      console.error(`[${botInfo.username}] ERROR: ${data.toString()}`);
    });
    
    newBotProcess.on('exit', async (code) => {
      console.log(`[${botInfo.username}] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
      runningBots.delete(botId);
      await db.query('UPDATE bots SET status = $1 WHERE id = $2', ['stopped', dbId]);
    });

    newBotProcess.unref();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ –ø–∞–º—è—Ç–∏
    runningBots.set(botId, {
      ...botInfo,
      process: newBotProcess,
      settings: botSettings,
      pid: newBotProcess.pid,
      updatedAt: new Date()
    });

    console.log(`üîÑ –ë–æ—Ç ${botInfo.username} –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤—ã–π PID: ${newBotProcess.pid}`);

    res.json({
      success: true,
      message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!',
      bot: {
        id: botId,
        name: botSettings.name,
        username: botInfo.username,
        status: 'running',
        pid: newBotProcess.pid,
        updatedAt: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: ${error.message}`
    });
  }
});

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î)
 */
router.delete('/stop/:botId', async (req, res) => {
  try {
    const { botId } = req.params;
    const dbId = parseInt(botId.replace('bot_', ''));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –ë–î
    const botRecord = await db.query('SELECT * FROM bots WHERE id = $1', [dbId]);
    if (botRecord.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
      });
    }
    
    const botInfo = runningBots.get(botId);

    console.log(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞: ${botRecord.rows[0].telegram_username}`);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if (botInfo && botInfo.process) {
      try {
        process.kill(botInfo.process.pid, 'SIGTERM');
        console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (PID: ${botInfo.process.pid})`);
      } catch (e) {
        console.log('‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    } else {
      console.log('‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î (–ù–ï —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å!)
    await db.query('UPDATE bots SET status = $1 WHERE id = $2', ['stopped', dbId]);

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    runningBots.delete(botId);

    // –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –±–æ—Ç–∞ - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

    res.json({
      success: true,
      message: `–ë–æ—Ç ${botInfo.username} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: `–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: ${error.message}`
    });
  }
});

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã)
 */
router.delete('/delete/:botId', async (req, res) => {
  try {
    const { botId } = req.params;
    const dbId = parseInt(botId.replace('bot_', ''));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –ë–î
    const botRecord = await db.query('SELECT * FROM bots WHERE id = $1', [dbId]);
    if (botRecord.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
      });
    }

    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –±–æ—Ç–∞: ${botRecord.rows[0].telegram_username}`);
    
    const botInfo = runningBots.get(botId);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
    if (botInfo && botInfo.process) {
      try {
        process.kill(botInfo.process.pid, 'SIGTERM');
        console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º');
      } catch (e) {
        console.log('‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
      runningBots.delete(botId);
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    await db.query('DELETE FROM bots WHERE id = $1', [dbId]);

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –±–æ—Ç–∞
    const botDir = path.join(__dirname, '../../deployed_bots', botId);
    try {
      await fs.rm(botDir, { recursive: true, force: true });
      console.log(`‚úÖ –§–∞–π–ª—ã –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω—ã`);
    } catch (e) {
      console.log('–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã');
    }

    res.json({
      success: true,
      message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞: ${error.message}`
    });
  }
});

/**
 * –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
 */
router.post('/start/:botId', async (req, res) => {
  try {
    const { botId } = req.params;
    const dbId = parseInt(botId.replace('bot_', ''));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ
    if (runningBots.has(botId)) {
      return res.status(400).json({
        success: false,
        message: '–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    const result = await db.query(
      'SELECT id, name, token, config, telegram_username FROM bots WHERE id = $1',
      [dbId]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
      });
    }

    const botRecord = result.rows[0];
    const botDir = path.join(__dirname, '../../deployed_bots', botId);

    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞:', botRecord.name);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    const botProcess = spawn('python3', ['bot.py'], {
      cwd: botDir,
      detached: true,
      stdio: ['ignore', 'pipe', 'pipe']
    });

    botProcess.stdout.on('data', (data) => {
      console.log(`[${botRecord.name}] ${data.toString()}`);
    });

    botProcess.stderr.on('data', (data) => {
      console.error(`[${botRecord.name}] ERROR: ${data.toString()}`);
    });
    
    botProcess.on('exit', async (code) => {
      console.log(`[${botRecord.name}] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
      runningBots.delete(botId);
      await db.query('UPDATE bots SET status = $1 WHERE id = $2', ['stopped', dbId]);
    });

    runningBots.set(botId, {
      process: botProcess,
      dbId: dbId,
      dir: botDir,
      name: botRecord.name,
      token: botRecord.token,
      username: botRecord.telegram_username,
      settings: botRecord.config,
      pid: botProcess.pid
    });

    botProcess.unref();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await db.query('UPDATE bots SET status = $1 WHERE id = $2', ['running', dbId]);

    console.log(`‚úÖ –ë–æ—Ç ${botRecord.name} –∑–∞–ø—É—â–µ–Ω! PID: ${botProcess.pid}`);

    res.json({
      success: true,
      message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',
      bot: {
        id: botId,
        name: botRecord.name,
        status: 'running',
        pid: botProcess.pid
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${error.message}`
    });
  }
});

/**
 * API –¥–ª—è WebApp - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
 */
router.get('/webapp/:botId/data', async (req, res) => {
  try {
    const { botId } = req.params;
    const dbId = parseInt(botId.replace('bot_', ''));
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏–∑ –ë–î
    const result = await db.query('SELECT config FROM bots WHERE id = $1', [dbId]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ success: false, message: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const config = result.rows[0].config;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è WebApp
    const webAppData = {
      name: config.name,
      description: config.description,
      category: config.category,
      webAppContent: config.webAppContent || {},
      features: config.features,
      theme: {
        primaryColor: config.category === 'ecommerce' ? '#3b82f6' : '#8b5cf6',
        accentColor: config.category === 'ecommerce' ? '#10b981' : '#ec4899'
      }
    };
    
    res.json({
      success: true,
      data: webAppData
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö WebApp:', error);
    res.status(500).json({
      success: false,
      message: `–û—à–∏–±–∫–∞: ${error.message}`
    });
  }
});

/**
 * API –¥–ª—è WebApp - –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (–∑–∞–∫–∞–∑, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —Ç.–¥.)
 */
router.post('/webapp/:botId/action', async (req, res) => {
  try {
    const { botId } = req.params;
    const { action, data, userId } = req.body;
    
    console.log(`üì± WebApp Action: ${action}`, data);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –≤ –ë–î, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –∏ —Ç.–¥.
    // –ü—Ä–∏–º–µ—Ä: –∑–∞–∫–∞–∑, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–æ–º - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
    
    res.json({
      success: true,
      message: '–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
      actionId: Date.now()
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è WebApp:', error);
    res.status(500).json({
      success: false,
      message: `–û—à–∏–±–∫–∞: ${error.message}`
    });
  }
});

module.exports = router;