// –®–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã @Usergate –±–æ—Ç–∞
// Conference/Event Management Bot Template

const usergateTemplate = {
  id: 'usergate_conference',
  name: 'Conference & Event Management',
  category: 'events_conference',
  description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
  icon: 'üé§',
  complexity: 'advanced',
  features: {
    multiLanguage: true,
    analytics: true,
    scheduling: true,
    fileUpload: true,
    voiceMessages: false,
    webApp: true,
    payments: true,
    geolocation: true,
    notifications: true,
    polls: true,
    broadcasts: true,
    qrCodes: true
  },
  
  // –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö (–∞–Ω–∞–ª–æ–≥ Laravel Models)
  dataModels: {
    telegramUser: {
      fields: {
        uuid: 'string',
        telegram_id: 'integer',
        username: 'string',
        first_name: 'string', 
        last_name: 'string',
        email: 'string',
        is_verified: 'boolean',
        role: 'string',
        language_code: 'string',
        last_active_at: 'datetime',
        balance: 'integer'
      },
      methods: {
        'get_full_name': 'return f"{self.first_name} {self.last_name}".strip()',
        'mark_active': 'self.last_active_at = datetime.now()',
        'add_points': 'self.balance += points'
      }
    },
    
    event: {
      fields: {
        name: 'string',
        description: 'text',
        start_time: 'datetime',
        end_time: 'datetime',
        location: 'string',
        max_participants: 'integer',
        registration_required: 'boolean',
        points_reward: 'integer'
      }
    },
    
    activity: {
      fields: {
        name: 'string',
        description: 'text',
        location: 'string',
        points: 'integer',
        qr_code: 'string',
        is_active: 'boolean'
      }
    },
    
    survey: {
      fields: {
        title: 'string',
        questions: 'json',
        is_poll: 'boolean',
        poll_id: 'string',
        reward_points: 'integer'
      }
    },
    
    product: {
      fields: {
        name: 'string',
        description: 'text',
        price: 'integer',
        stock: 'integer',
        image: 'string'
      }
    },
    
    order: {
      fields: {
        product_id: 'integer',
        user_id: 'integer',
        price: 'integer',
        status: 'string'
      }
    }
  },

  // Action Classes Pattern (–∞–Ω–∞–ª–æ–≥ Service Classes)
  actions: {
    start_command: {
      description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start',
      code: `
async def handle_start_command(update, context):
    user = get_or_create_user(update.effective_user)
    
    if not user.email:
        await send_welcome_message(user)
        await request_email_verification(user)
    else:
        await show_main_menu(user)
`
    },
    
    mini_app_command: {
      description: '–ó–∞–ø—É—Å–∫ WebApp',
      code: `
async def handle_mini_command(update, context):
    user = get_current_user(update)
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(
            "üåê –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
            web_app=WebAppInfo(url=f"{WEBAPP_URL}?user_id={user.telegram_id}")
        )],
        [InlineKeyboardButton("üìä –ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å", callback_data="quick_survey")]
    ])
    
    await context.bot.send_message(
        chat_id=user.telegram_id,
        text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é! üéâ",
        reply_markup=keyboard
    )
`
    },
    
    handle_qr_scan: {
      description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞',
      code: `
async def handle_qr_scan(qr_data, user):
    activity = get_activity_by_qr(qr_data)
    
    if not activity:
        return "‚ùå QR –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    if user.has_completed_activity(activity):
        return "‚úÖ –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    
    user.complete_activity(activity)
    user.add_points(activity.points)
    
    return f"üéâ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å '{activity.name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! +{activity.points} –±–∞–ª–ª–æ–≤"
`
    },
    
    survey_handler: {
      description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ –∏ poll',
      code: `
async def handle_survey_response(update, context):
    if update.poll_answer:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Poll –æ—Ç–≤–µ—Ç–∞
        poll_answer = update.poll_answer
        survey = get_survey_by_poll_id(poll_answer.poll_id)
        user = get_user_by_telegram_id(poll_answer.user.id)
        
        save_survey_answer(user, survey, poll_answer.option_ids)
        
        if survey.reward_points:
            user.add_points(survey.reward_points)
            await notify_points_earned(user, survey.reward_points)
    
    elif update.callback_query:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Callback –∫–Ω–æ–ø–æ–∫
        callback_data = update.callback_query.data
        
        if callback_data.startswith('survey_'):
            survey_id = callback_data.split('_')[1]
            await start_survey(update.effective_user, survey_id)
`
    }
  },

  // WebApp –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  webAppPages: {
    homepage: {
      title: '–ì–ª–∞–≤–Ω–∞—è',
      description: '–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏',
      components: ['qr_scanner', 'schedule', 'activities', 'shop', 'profile']
    },
    
    schedule: {
      title: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
      description: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
      features: ['event_list', 'calendar_view', 'reminders', 'registration']
    },
    
    activities: {
      title: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
      description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–æ–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
      features: ['qr_scanner', 'location_map', 'points_tracker']
    },
    
    shop: {
      title: '–ú–∞–≥–∞–∑–∏–Ω',
      description: '–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤ –Ω–∞ –ø—Ä–∏–∑—ã',
      features: ['product_catalog', 'balance_display', 'order_history']
    },
    
    profile: {
      title: '–ü—Ä–æ—Ñ–∏–ª—å',
      description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      features: ['user_info', 'achievements', 'qr_code', 'statistics']
    }
  },

  // –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
  commands: [
    {
      command: '/start',
      description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º',
      action: 'start_command',
      public: true
    },
    {
      command: '/mini',
      description: '–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
      action: 'mini_app_command',
      public: true
    },
    {
      command: '/schedule',
      description: '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
      action: 'show_schedule',
      public: true
    },
    {
      command: '/balance',
      description: '–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤',
      action: 'show_balance',
      public: true
    },
    {
      command: '/help',
      description: '–ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
      action: 'show_help',
      public: true
    }
  ],

  // Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  callbacks: [
    {
      pattern: 'survey_*',
      description: '–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞',
      action: 'start_survey'
    },
    {
      pattern: 'activity_*',
      description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
      action: 'show_activity'
    },
    {
      pattern: 'register_event_*',
      description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
      action: 'register_event'
    },
    {
      pattern: 'verify_email',
      description: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email',
      action: 'verify_email'
    }
  ],

  // –°—Ü–µ–Ω–∞—Ä–∏–∏ (–∞–Ω–∞–ª–æ–≥ Webhook Handler)
  scenarios: {
    user_registration: {
      name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      steps: [
        {
          trigger: '/start',
          action: 'welcome_message',
          next: 'email_request'
        },
        {
          trigger: 'email_input',
          action: 'verify_email',
          next: 'email_confirmation'
        },
        {
          trigger: 'email_confirmed',
          action: 'show_main_menu',
          next: 'main_flow'
        }
      ]
    },
    
    activity_completion: {
      name: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
      steps: [
        {
          trigger: 'qr_scan',
          action: 'validate_qr',
          next: 'award_points'
        },
        {
          trigger: 'points_awarded',
          action: 'show_achievement',
          next: 'suggest_next_activity'
        }
      ]
    },
    
    survey_completion: {
      name: '–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞',
      steps: [
        {
          trigger: 'survey_start',
          action: 'send_poll',
          next: 'await_response'
        },
        {
          trigger: 'poll_answer',
          action: 'process_answer',
          next: 'reward_user'
        }
      ]
    }
  },

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  config: {
    database_tables: [
      'telegram_users',
      'events', 
      'activities',
      'surveys',
      'survey_answers',
      'products',
      'orders',
      'transactions',
      'broadcasts'
    ],
    
    required_env_vars: [
      'TELEGRAM_BOT_TOKEN',
      'WEBAPP_URL',
      'DATABASE_URL',
      'ADMIN_CHAT_ID'
    ],
    
    features: {
      admin_panel: true,
      user_management: true,
      analytics_dashboard: true,
      broadcast_system: true,
      payment_integration: false,
      external_api_integration: true
    }
  },

  // –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  use_cases: [
    '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏ IT-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
    '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è',
    '–í—ã—Å—Ç–∞–≤–∫–∏ –∏ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏', 
    '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
    '–§–µ—Å—Ç–∏–≤–∞–ª–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
    '–ë–∏–∑–Ω–µ—Å-—Ñ–æ—Ä—É–º—ã',
    '–¢—Ä–µ–Ω–∏–Ω–≥–∏ –∏ –≤–æ—Ä–∫—à–æ–ø—ã'
  ],

  // –ì–æ—Ç–æ–≤—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  integrations: {
    calendar: 'Google Calendar API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
    payment: 'Stripe/PayPal –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π',
    crm: 'HubSpot/Salesforce –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏',
    email: 'SendGrid –¥–ª—è email —Ä–∞—Å—Å—ã–ª–æ–∫',
    analytics: 'Google Analytics –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
    storage: 'AWS S3 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤'
  }
};

module.exports = { usergateTemplate };
