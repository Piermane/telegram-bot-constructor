/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä Python –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
 */

function generateAdvancedPythonBot(botSettings, botInfo) {
  const hasWebApp = botSettings.features?.webApp || false;
  const hasPayments = botSettings.features?.payments || botSettings.integrations?.payment?.enabled || false;
  const hasGeolocation = botSettings.features?.geolocation || false;
  const hasNotifications = botSettings.features?.notifications || botSettings.integrations?.notifications?.onNewUser || false;
  const hasPolls = botSettings.features?.polls || false;
  const hasBroadcasts = botSettings.features?.broadcasts || false;
  const hasQrCodes = botSettings.features?.qrCodes || false;
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è WebApp
  const webAppProducts = botSettings.webAppContent?.products || [];
  const webAppSurveys = botSettings.webAppContent?.surveys || [];
  const webAppActivities = botSettings.webAppContent?.activities || [];
  const webAppSchedule = botSettings.webAppContent?.schedule || [];
  
  return `#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
${botSettings.name} - Professional Telegram Bot
–°–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é TelegramBot Constructor PRO

ü§ñ –ë–æ—Ç: @${botInfo.username}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${botSettings.category}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${botSettings.description}

üíº –ü–†–û–ú–´–®–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:
${hasWebApp ? 'üì± Web App –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è' : ''}
${hasPayments ? 'üí≥ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞' : ''}
${hasGeolocation ? 'üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏ –¥–æ—Å—Ç–∞–≤–∫–∞' : ''}
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

üöÄ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ù–£!
"""

import logging
import sqlite3
import json
import datetime
import asyncio
import hashlib
import uuid
import urllib.parse
from pathlib import Path
from typing import Dict, List, Optional, Any

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    ReplyKeyboardMarkup, 
    KeyboardButton,
    WebAppInfo,
    LabeledPrice,
    PreCheckoutQuery${hasPolls ? ',\n    Poll' : ''}${hasQrCodes ? ',\n    InputFile' : ''}
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    MessageHandler, 
    filters, 
    ContextTypes,
    PreCheckoutQueryHandler${hasPolls ? ',\n    PollAnswerHandler' : ''}
)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "${botSettings.token}"
BOT_NAME = "${botSettings.name}"
BOT_USERNAME = "${botInfo.username}"
CATEGORY = "${botSettings.category}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
${hasPayments ? `
PAYMENT_PROVIDER_TOKEN = "${botSettings.integrations.payment.token}"
PAYMENT_PROVIDER = "${botSettings.integrations.payment.provider}"
CURRENCY = "RUB"
` : '# –ü–ª–∞—Ç–µ–∂–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã'}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebApp
${hasWebApp ? `
WEBAPP_URL = "${botSettings.webAppUrl || 'https://webapp-bot-constructor.loca.lt'}"  # localtunnel WebApp
WEBAPP_TYPE = "${botSettings.category}"
` : '# WebApp –æ—Ç–∫–ª—é—á–µ–Ω'}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_CHAT_ID = "${botSettings.integrations.notifications.adminChat || ''}"
NOTIFY_NEW_USERS = ${botSettings.integrations.notifications.onNewUser ? 'True' : 'False'}
NOTIFY_ORDERS = ${botSettings.integrations.notifications.onOrder ? 'True' : 'False'}
NOTIFY_ERRORS = ${botSettings.integrations.notifications.onError ? 'True' : 'False'}

# ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler(f'{BOT_NAME.replace(" ", "_")}_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==================== ACTION CLASSES (Usergate Pattern) ====================

class UserAction:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è Action –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (–∞–Ω–∞–ª–æ–≥ Service Classes –∏–∑ Laravel)"""
    
    def __init__(self, bot, user_id: int):
        self.bot = bot
        self.user_id = user_id
    
    async def execute(self, *args, **kwargs):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        raise NotImplementedError

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class DatabaseManager:
    def __init__(self, db_path: str = 'bot_database.db'):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                phone TEXT,
                email TEXT${
                    botSettings.database?.customFields && botSettings.database.customFields
                        .filter(field => !['phone', 'email', 'username', 'first_name', 'last_name', 'user_id', 'language_code', 'is_premium', 'loyalty_points', 'created_at', 'last_activity'].includes(field.name))
                        .length > 0 
                    ? ',\n                ' + botSettings.database.customFields
                        .filter(field => !['phone', 'email', 'username', 'first_name', 'last_name', 'user_id', 'language_code', 'is_premium', 'loyalty_points', 'created_at', 'last_activity'].includes(field.name))
                        .map(field => 
                            `${field.name} ${field.type === 'number' ? 'INTEGER' : field.type === 'date' ? 'DATE' : 'TEXT'}`
                        ).join(',\n                ')
                    : ''
                },
                language_code TEXT DEFAULT 'ru',
                is_premium BOOLEAN DEFAULT 0,
                loyalty_points INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤/–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                order_id TEXT PRIMARY KEY,
                user_id INTEGER,
                order_type TEXT,
                status TEXT DEFAULT 'pending',
                items TEXT,
                total_amount REAL,
                delivery_address TEXT,
                payment_method TEXT,
                payment_status TEXT DEFAULT 'pending',
                notes TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cart (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                item_id TEXT,
                item_name TEXT,
                quantity INTEGER DEFAULT 1,
                price REAL,
                options TEXT,
                added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        ${botSettings.database.users.saveMessages ? `
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                message_type TEXT,
                message_text TEXT,
                scene_id TEXT,
                media_url TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        ` : '# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ'}
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        ${botSettings.features.analytics ? `
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS analytics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                event_type TEXT,
                user_id INTEGER,
                scene_id TEXT,
                data TEXT,
                session_id TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        ` : '# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞'}
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è WebApp –¥–∞–Ω–Ω—ã—Ö
        ${hasWebApp ? `
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS webapp_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                data_type TEXT,
                data_value TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        ` : '# WebApp –æ—Ç–∫–ª—é—á–µ–Ω'}
        
        conn.commit()
        conn.close()
        logger.info("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def execute_query(self, query: str, params: tuple = (), fetch: bool = False):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            cursor.execute(query, params)
            if fetch:
                result = cursor.fetchall()
            else:
                result = cursor.rowcount
            conn.commit()
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            conn.rollback()
            raise
        finally:
            conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = DatabaseManager()

# ==================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ====================

class UserManager:
    @staticmethod
    def save_user(user_id: int, username: str, first_name: str, last_name: str, **kwargs):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        db.execute_query('''
            INSERT OR REPLACE INTO users (
                user_id, username, first_name, last_name, last_activity
            ) VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name, datetime.datetime.now()))
    
    @staticmethod
    def get_user(user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = db.execute_query(
            'SELECT * FROM users WHERE user_id = ?', 
            (user_id,), 
            fetch=True
        )
        return dict(zip([col[0] for col in db.execute_query('PRAGMA table_info(users)', fetch=True)], result[0])) if result else None
    
    @staticmethod
    def update_user_field(user_id: int, field: str, value: Any):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        db.execute_query(f'UPDATE users SET {field} = ? WHERE user_id = ?', (value, user_id))

# ==================== –ö–û–†–ó–ò–ù–ê ====================

${botSettings.category === 'ecommerce' ? `
class CartManager:
    @staticmethod
    def add_item(user_id: int, item_id: str, item_name: str, price: float, quantity: int = 1, options: str = ''):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        db.execute_query('''
            INSERT INTO cart (user_id, item_id, item_name, quantity, price, options)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, item_id, item_name, quantity, price, options))
    
    @staticmethod
    def get_cart(user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = db.execute_query(
            'SELECT * FROM cart WHERE user_id = ?', 
            (user_id,), 
            fetch=True
        )
        columns = ['id', 'user_id', 'item_id', 'item_name', 'quantity', 'price', 'options', 'added_at']
        return [dict(zip(columns, row)) for row in result]
    
    @staticmethod
    def clear_cart(user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
        db.execute_query('DELETE FROM cart WHERE user_id = ?', (user_id,))
    
    @staticmethod
    def get_cart_total(user_id: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã"""
        result = db.execute_query(
            'SELECT SUM(price * quantity) FROM cart WHERE user_id = ?', 
            (user_id,), 
            fetch=True
        )
        return result[0][0] if result and result[0][0] else 0.0
` : '# –ö–æ—Ä–∑–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è ecommerce'}

# ==================== –ê–ù–ê–õ–ò–¢–ò–ö–ê ====================

${botSettings.features.analytics ? `
class AnalyticsManager:
    @staticmethod
    def log_event(event_type: str, user_id: int, scene_id: str = None, data: Dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        session_id = hashlib.md5(f"{user_id}_{datetime.date.today()}".encode()).hexdigest()
        db.execute_query('''
            INSERT INTO analytics (event_type, user_id, scene_id, data, session_id)
            VALUES (?, ?, ?, ?, ?)
        ''', (event_type, user_id, scene_id, json.dumps(data) if data else None, session_id))
    
    @staticmethod
    def get_stats() -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = {}
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = db.execute_query('SELECT COUNT(*) FROM users', fetch=True)
        stats['total_users'] = result[0][0] if result else 0
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        result = db.execute_query(
            "SELECT COUNT(DISTINCT user_id) FROM analytics WHERE date(created_at) = date('now')", 
            fetch=True
        )
        stats['active_today'] = result[0][0] if result else 0
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ü–µ–Ω—ã
        result = db.execute_query('''
            SELECT scene_id, COUNT(*) as count 
            FROM analytics 
            WHERE event_type = 'scene_viewed' AND scene_id IS NOT NULL
            GROUP BY scene_id 
            ORDER BY count DESC 
            LIMIT 5
        ''', fetch=True)
        stats['popular_scenes'] = result
        
        return stats
` : '# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞'}

# ==================== –°–¶–ï–ù–ê–†–ò–ò –ë–û–¢–ê ====================

SCENES = {
${(botSettings.scenes && botSettings.scenes.length > 0) ? botSettings.scenes.map(scene => `
    "${scene.id}": {
        "name": "${scene.name}",
        "trigger": "${scene.trigger}",
        "message": """${scene.message}""",
        "buttons": [
${scene.buttons && scene.buttons.length > 0 ? scene.buttons.map(button => `
            {
                "text": "${button.text}", 
                "action": "${button.action}", 
                "value": "${button.value}"
            }`).join(',\n') : ''}
        ]
    }`).join(',\n') : `
    "start": {
        "name": "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
        "trigger": "/start",
        "message": """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. 

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
        "buttons": [
            {
                "text": "üìû –°–≤—è–∑–∞—Ç—å—Å—è", 
                "action": "callback", 
                "value": "contact"
            },
            {
                "text": "‚ùì –ü–æ–º–æ—â—å", 
                "action": "callback", 
                "value": "help"
            }
        ]
    }`}
}

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

def create_keyboard(scene_id: str, user_data: Dict = None) -> Optional[InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ü–µ–Ω—ã"""
    if scene_id not in SCENES:
        return None
    
    scene = SCENES[scene_id]
    if not scene["buttons"]:
        return None
    
    keyboard = []
    row = []
    
    for i, button in enumerate(scene["buttons"]):
        btn = None
        
        if button["action"] == "callback":
            btn = InlineKeyboardButton(button["text"], callback_data=button["value"])
        elif button["action"] == "url":
            btn = InlineKeyboardButton(button["text"], url=button["value"])
        elif button["action"] == "webapp":
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é WebApp –∫–Ω–æ–ø–∫—É
            webapp_url = f"{WEBAPP_URL}?type={WEBAPP_TYPE}&name={BOT_NAME}&description={urllib.parse.quote(button.get('description', 'WebApp'))}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç WebApp –≤ URL
            webapp_content = {}
            
            ${webAppProducts.length > 0 ? `
            # –¢–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏
            webapp_content["products"] = [
                ${webAppProducts.map(product => `{
                    "id": "${product.id}",
                    "name": "${product.name.replace(/"/g, '\\"')}",
                    "price": ${product.price},
                    "emoji": "${product.emoji}",
                    "description": "${product.description.replace(/"/g, '\\"')}"
                }`).join(',\n                ')}
            ]
            ` : ''}
            
            ${webAppSurveys.length > 0 ? `
            # –û–ø—Ä–æ—Å—ã –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
            webapp_content["surveys"] = [
                ${webAppSurveys.map(survey => `{
                    "id": "${survey.id}",
                    "title": "${survey.title.replace(/"/g, '\\"')}",
                    "maxPoints": ${survey.maxPoints},
                    "emoji": "${survey.emoji}",
                    "description": "${survey.description.replace(/"/g, '\\"')}"
                }`).join(',\n                ')}
            ]
            ` : ''}
            
            ${webAppActivities.length > 0 ? `
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∑–∞–¥–∞–Ω–∏—è
            webapp_content["activities"] = [
                ${webAppActivities.map(activity => `{
                    "id": "${activity.id}",
                    "name": "${activity.name.replace(/"/g, '\\"')}",
                    "points": ${activity.points},
                    "emoji": "${activity.emoji}",
                    "description": "${activity.description.replace(/"/g, '\\"')}"
                }`).join(',\n                ')}
            ]
            ` : ''}
            
            ${webAppSchedule.length > 0 ? `
            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            webapp_content["schedule"] = [
                ${webAppSchedule.map(event => `{
                    "id": "${event.id}",
                    "title": "${event.title.replace(/"/g, '\\"')}",
                    "speaker": "${event.speaker.replace(/"/g, '\\"')}",
                    "startTime": "${event.startTime}",
                    "endTime": "${event.endTime}"
                }`).join(',\n                ')}
            ]
            ` : ''}
            
            if webapp_content:
                content_json = json.dumps(webapp_content)
                webapp_url += f"&content={urllib.parse.quote(content_json)}"
            
            btn = InlineKeyboardButton(button["text"], web_app=WebAppInfo(url=webapp_url)) 
        elif button["action"] == "payment":
            btn = InlineKeyboardButton(button["text"], callback_data=f"pay_{button['value']}")
        elif button["action"] == "contact":
            return ReplyKeyboardMarkup(
                [[KeyboardButton(button["text"], request_contact=True)]], 
                resize_keyboard=True, 
                one_time_keyboard=True
            )
        elif button["action"] == "location":
            return ReplyKeyboardMarkup(
                [[KeyboardButton(button["text"], request_location=True)]], 
                resize_keyboard=True, 
                one_time_keyboard=True
            )
        
        if btn:
            row.append(btn)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
            if len(row) == 2 or i == len(scene["buttons"]) - 1:
                keyboard.append(row)
                row = []
    
    return InlineKeyboardMarkup(keyboard) if keyboard else None

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–¶–ï–ù ====================

async def send_scene(update: Update, context: ContextTypes.DEFAULT_TYPE, scene_id: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ü–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if scene_id not in SCENES:
        await update.message.reply_text("üö´ –°—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    scene = SCENES[scene_id]
    user_id = update.effective_user.id
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    message = scene["message"]
    if kwargs:
        try:
            message = message.format(**kwargs)
        except KeyError as e:
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = create_keyboard(scene_id, kwargs)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    ${botSettings.features.analytics ? `
    AnalyticsManager.log_event("scene_viewed", user_id, scene_id, {"scene_name": scene["name"]})
    ` : ''}
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if keyboard:
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='HTML')
    else:
        await update.message.reply_text(message, parse_mode='HTML')

# ==================== –ö–û–ú–ê–ù–î–´ ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    UserManager.save_user(user.id, user.username, user.first_name, user.last_name)
    
    ${botSettings.features.analytics ? `
    AnalyticsManager.log_event("bot_started", user.id)
    ` : ''}
    
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (@{user.username or '–±–µ–∑ username'}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    ${botSettings.integrations.notifications.onNewUser ? `
    if ADMIN_CHAT_ID and NOTIFY_NEW_USERS:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–æ—Ç–µ {BOT_NAME}!\\n\\n"
                     f"üë§ –ò–º—è: {user.first_name} {user.last_name or ''}\\n"
                     f"üÜî Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\\n"
                     f"üî¢ ID: {user.id}\\n"
                     f"üåç –Ø–∑—ã–∫: {user.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    ` : ''}
    
    await send_scene(update, context, "start")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = f"""
‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É {BOT_NAME}</b>

ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
${botSettings.features.analytics ? '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)' : ''}

üì± <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>
${hasWebApp ? '‚Ä¢ üì± Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' : ''}
${hasPayments ? '‚Ä¢ üí≥ –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞' : ''}
${hasGeolocation ? '‚Ä¢ üìç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è' : ''}
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

üÜò <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
${botSettings.integrations.notifications.adminChat ? `–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin` : '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'}
    """
    
    await update.message.reply_text(help_text, parse_mode='HTML')

${botSettings.features.analytics ? `
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = str(update.effective_user.id)
    
    if user_id != ADMIN_CHAT_ID:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    stats = AnalyticsManager.get_stats()
    
    stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ {BOT_NAME}</b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('active_today', 0)}

üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ü–µ–Ω—ã:</b>
"""
    
    for scene_id, count in stats.get('popular_scenes', []):
        scene_name = SCENES.get(scene_id, {}).get('name', scene_id)
        stats_text += f"‚Ä¢ {scene_name}: {count}\\n"
    
    await update.message.reply_text(stats_text, parse_mode='HTML')
` : ''}

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ====================

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    callback_data = query.data
    
    ${botSettings.features.analytics ? `
    AnalyticsManager.log_event("button_clicked", user_id, data={"callback_data": callback_data})
    ` : ''}
    
    logger.info(f"üñ±Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {callback_data}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if callback_data.startswith('pay_'):
        await handle_payment_request(query, context, callback_data[4:])
    elif callback_data in SCENES:
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ - —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π fake_update
        import copy
        fake_update = copy.deepcopy(update)
        fake_update.message = query.message
        await send_scene(fake_update, context, callback_data)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö callback'–æ–≤
        await handle_custom_callback(query, context, callback_data)

async def handle_custom_callback(query, context, callback_data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö callback'–æ–≤"""
    user_id = query.from_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
    if callback_data == '/menu' or callback_data == '/catalog':
        menu_text = f"üìã –ú–µ–Ω—é {BOT_NAME}\\n\\n"
        
        ${botSettings.category === 'ecommerce' && botSettings.id === 'restaurant_delivery' ? `
        menu_text += """üçï –ü–ò–¶–¶–ê:
‚Ä¢ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ - 890‚ÇΩ
‚Ä¢ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏ - 1190‚ÇΩ
‚Ä¢ –ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞ - 1290‚ÇΩ

üçù –ü–ê–°–¢–ê:
‚Ä¢ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞ - 790‚ÇΩ
‚Ä¢ –ë–æ–ª–æ–Ω—å–µ–∑–µ - 890‚ÇΩ

ü•§ –ù–ê–ü–ò–¢–ö–ò:
‚Ä¢ –ö–æ–ª–∞ - 190‚ÇΩ
‚Ä¢ –í–æ–¥–∞ - 90‚ÇΩ

üõí –î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞"""
        ` : botSettings.category === 'ecommerce' && botSettings.id === 'electronics_store' ? `
        menu_text += """üì± –°–ú–ê–†–¢–§–û–ù–´:
‚Ä¢ iPhone 15 - 79990‚ÇΩ
‚Ä¢ Samsung S24 - 69990‚ÇΩ

üíª –ù–û–£–¢–ë–£–ö–ò:
‚Ä¢ MacBook Air - 129990‚ÇΩ
‚Ä¢ Dell XPS - 89990‚ÇΩ

üí¨ –î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–æ–¥–µ–ª—å"""
        ` : `
        menu_text += """üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
‚Ä¢ –ù–∞—à–∏ —É—Å–ª—É–≥–∏  
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã
‚Ä¢ –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã

üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç"""
        `}
        
        await query.edit_message_text(menu_text)
    
    ${botSettings.category === 'ecommerce' ? `
    elif callback_data == 'cart':
        cart_items = CartManager.get_cart(user_id) if 'CartManager' in globals() else []
        
        if not cart_items:
            cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–µ–Ω—é!"
        else:
            cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\\n\\n"
            total = 0
            for item in cart_items:
                item_total = item['price'] * item['quantity']
                cart_text += f"‚Ä¢ {item['item_name']} x{item['quantity']} = {item_total}‚ÇΩ\\n"
                total += item_total
            cart_text += f"\\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ\\n\\nüí≥ –ì–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?"
        
        await query.edit_message_text(cart_text)
    ` : ''}
    
    elif callback_data == 'contacts':
        await query.edit_message_text(
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã {BOT_NAME}\\n\\n"
            f"üìß Email: info@company.ru\\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\\n"
            f"üåê –°–∞–π—Ç: www.company.ru\\n"
            f"üìç –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1\\n\\n"
            f"üïí –†–∞–±–æ—Ç–∞–µ–º: –ü–Ω-–ü—Ç 9:00-18:00"
        )
    
    elif callback_data == 'help':
        await query.edit_message_text(
            f"‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É {BOT_NAME}\\n\\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\\n"
            f"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\\n"
            f"/help - –°–ø—Ä–∞–≤–∫–∞\\n\\n"
            f"ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\\n"
            f"‚Ä¢ {len(SCENES)} –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\\n"
            f"‚Ä¢ {'–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞' if ${botSettings.features.analytics ? 'True' : 'False'} else '–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è'}\\n"
            f"‚Ä¢ {'–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤' if ${botSettings.features.fileUpload ? 'True' : 'False'} else '–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç'}"
        )
    
    # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
    else:
        await query.edit_message_text(f"‚ÑπÔ∏è –†–∞–∑–¥–µ–ª '{callback_data}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\\n\\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é")

${hasPayments ? `
# ==================== –ü–õ–ê–¢–ï–ñ–ò ====================

async def handle_payment_request(query, context, payment_type: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    user_id = query.from_user.id
    
    ${botSettings.category === 'ecommerce' ? `
    # –î–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ - –æ–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
    cart_total = CartManager.get_cart_total(user_id)
    if cart_total <= 0:
        await query.edit_message_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        return
    
    title = f"–ó–∞–∫–∞–∑ –≤ {BOT_NAME}"
    description = "–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
    prices = [LabeledPrice("–¢–æ–≤–∞—Ä—ã", int(cart_total * 100))]  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    ` : `
    # –ë–∞–∑–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
    title = f"–£—Å–ª—É–≥–∞ –≤ {BOT_NAME}"
    description = "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏"
    prices = [LabeledPrice("–£—Å–ª—É–≥–∞", 100000)]  # 1000 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    `}
    
    await context.bot.send_invoice(
        chat_id=user_id,
        title=title,
        description=description,
        payload=f"payment_{user_id}_{payment_type}",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=prices,
        start_parameter=f"payment_{payment_type}"
    )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞"""
    user_id = update.effective_user.id
    payment = update.message.successful_payment
    
    logger.info(f"üí∞ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞: {payment.total_amount/100}‚ÇΩ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    ${botSettings.category === 'ecommerce' ? `
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    CartManager.clear_cart(user_id)
    ` : ''}
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    if ADMIN_CHAT_ID and NOTIFY_ORDERS:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –≤ –±–æ—Ç–µ {BOT_NAME}!\\n\\n"
                     f"üíµ –°—É–º–º–∞: {payment.total_amount/100}‚ÇΩ\\n"
                     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\\n"
                     f"üÜî Payment ID: {payment.provider_payment_charge_id}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")
    
    await update.message.reply_text(
        f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\\n\\n"
        f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {payment.total_amount/100}‚ÇΩ\\n"
        f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment.provider_payment_charge_id}\\n\\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ"
    )
` : ''}

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ====================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    ${botSettings.database.users.saveMessages ? `
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    db.execute_query('''
        INSERT INTO messages (user_id, message_type, message_text, scene_id)
        VALUES (?, ?, ?, ?)
    ''', (user_id, 'text', message_text, 'text_message'))
    ` : ''}
    
    ${botSettings.features.analytics ? `
    AnalyticsManager.log_event("message_received", user_id, data={"message_length": len(message_text)})
    ` : ''}
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if message_text.lower() in ['–ø–æ–º–æ—â—å', 'help', '—Å–ø—Ä–∞–≤–∫–∞']:
        await help_command(update, context)
        return
    
    # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç
    await update.message.reply_text(
        f"ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!\\n\\n"
        f"–Ø –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    )

${hasGeolocation ? `
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    location = update.message.location
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UserManager.update_user_field(user_id, 'latitude', location.latitude)
    UserManager.update_user_field(user_id, 'longitude', location.longitude)
    
    await update.message.reply_text(
        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\\n\\n"
        f"üó∫Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location.latitude:.6f}, {location.longitude:.6f}\\n"
        f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏"
    )
` : ''}

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ====================

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"üí• –û—à–∏–±–∫–∞: {context.error}")
    logger.error(f"üìÑ Update: {update}")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
    ${botSettings.integrations.notifications.onError ? `
    if ADMIN_CHAT_ID and NOTIFY_ERRORS:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ {BOT_NAME}:\\n\\n"
                     f"‚ùå {str(context.error)[:500]}..."
            )
        except:
            pass
    ` : ''}

# ==================== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: {BOT_NAME}")
    logger.info(f"ü§ñ Username: @{BOT_USERNAME}")
    logger.info(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORY}")
    logger.info(f"üé≠ –°—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(SCENES)}")
    logger.info(f"‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏:")
    ${hasWebApp ? `logger.info("  üì± WebApp: –≤–∫–ª—é—á–µ–Ω")` : ''}
    ${hasPayments ? `logger.info("  üí≥ –ü–ª–∞—Ç–µ–∂–∏: –≤–∫–ª—é—á–µ–Ω—ã")` : ''}
    ${hasGeolocation ? `logger.info("  üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∞")` : ''}
    ${botSettings.features.analytics ? `logger.info("  üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –≤–∫–ª—é—á–µ–Ω–∞")` : `logger.info("  üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –æ—Ç–∫–ª—é—á–µ–Ω–∞")`}
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    ${botSettings.features.analytics ? `application.add_handler(CommandHandler("stats", stats_command))` : ''}

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'–æ–≤
    application.add_handler(CallbackQueryHandler(button_callback))

    ${hasPayments ? `
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    ` : ''}

    ${hasGeolocation ? `
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))
    ` : ''}

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("üì± –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram: /start")
    logger.info("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫ polling
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
`;
}

module.exports = { generateAdvancedPythonBot };
