import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  Card,
  CardBody,
  CardHeader,
  Heading,
  Text,
  Button,
  VStack,
  HStack,
  Badge,
  SimpleGrid,
  Container,
  Alert,
  AlertIcon,
  useColorModeValue,
  IconButton,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  useToast,
  Box,
  Flex,
  Icon
} from '@chakra-ui/react';
import { AddIcon, ExternalLinkIcon, EditIcon, DeleteIcon, SettingsIcon } from '@chakra-ui/icons';
import { FiMoreVertical, FiRefreshCw, FiPlay, FiPause, FiAlertCircle, FiBarChart2, FiActivity } from 'react-icons/fi';
import { Link as RouterLink, useNavigate } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import { BotListSkeleton } from '../components/UI/SkeletonLoader';

interface Bot {
  id: string;
  name: string;
  username: string;
  status: 'running' | 'stopped' | 'error';
  url: string;
  startedAt: string;
  pid?: number;
  scenes: number;
}

const BotListPage: React.FC = () => {
  const navigate = useNavigate();
  const toast = useToast();
  
  const [bots, setBots] = useState<Bot[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [actionLoading, setActionLoading] = useState<string | null>(null);

  const cardBg = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  useEffect(() => {
    loadBots();
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(loadBots, 30000);
    return () => clearInterval(interval);
  }, []);

  const loadBots = async () => {
    try {
      console.log('[BotList] üîÑ Loading bots...');
      const response = await axios.get('/api/deploy/list');
      console.log('[BotList] ‚úÖ Got response:', response.data);
      
      if (response.data.success) {
        setBots(response.data.bots || []);
      } else {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      console.error('[BotList] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleStopBot = async (botId: string) => {
    setActionLoading(botId);
    try {
      const response = await fetch(`/api/deploy/stop/${botId}`, {
        method: 'DELETE'
      });
      const data = await response.json();
      
      if (data.success) {
        toast({
          title: '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
          description: data.message,
          status: 'success',
          duration: 3000,
        });
        loadBots(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
      } else {
        toast({
          title: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞',
          description: data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          status: 'error',
          duration: 5000,
        });
      }
    } catch (err) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞',
        status: 'error',
        duration: 5000,
      });
    } finally {
      setActionLoading(null);
    }
  };

  const handleDeleteBot = async (botId: string) => {
    setActionLoading(botId);
    try {
      const response = await fetch(`/api/deploy/delete/${botId}`, {
        method: 'DELETE'
      });
      const data = await response.json();
      
      if (data.success) {
        toast({
          title: '–ë–æ—Ç —É–¥–∞–ª–µ–Ω',
          description: data.message,
          status: 'success',
          duration: 3000,
        });
        loadBots(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
      } else {
        throw new Error(data.message);
      }
    } catch (err) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞',
        status: 'error',
        duration: 5000,
      });
    } finally {
      setActionLoading(null);
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'running': 
        return (
          <Badge colorScheme="green" px={3} py={1} borderRadius="full" display="flex" alignItems="center" gap={1}>
            <Icon as={FiPlay} boxSize={3} />
            –†–∞–±–æ—Ç–∞–µ—Ç
          </Badge>
        );
      case 'stopped': 
        return (
          <Badge colorScheme="gray" px={3} py={1} borderRadius="full" display="flex" alignItems="center" gap={1}>
            <Icon as={FiPause} boxSize={3} />
            –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          </Badge>
        );
      case 'error': 
        return (
          <Badge colorScheme="red" px={3} py={1} borderRadius="full" display="flex" alignItems="center" gap={1}>
            <Icon as={FiAlertCircle} boxSize={3} />
            –û—à–∏–±–∫–∞
          </Badge>
        );
      default: 
        return (
          <Badge px={3} py={1} borderRadius="full">
            –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
          </Badge>
        );
    }
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return '–ù/–î';
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '–ù/–î';
    return date.toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <>
        <Helmet>
          <title>–ú–æ–∏ –±–æ—Ç—ã - TelegramBot Constructor</title>
        </Helmet>
        <Container maxW="container.xl" py={8}>
          <VStack spacing={8} align="stretch">
            {/* Header Skeleton */}
            <Box>
              <Heading size="xl" mb={2}>–ú–æ–∏ –±–æ—Ç—ã</Heading>
              <Text color="gray.600">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ Telegram –±–æ—Ç–∞–º–∏</Text>
            </Box>
            
            {/* Loading Skeleton */}
            <BotListSkeleton count={6} />
          </VStack>
        </Container>
      </>
    );
  }

  return (
    <>
      <Helmet>
        <title>–ú–æ–∏ –±–æ—Ç—ã - TelegramBot Constructor</title>
      </Helmet>

      <Container maxW="container.xl" py={8}>
        <VStack spacing={8} align="stretch">
          
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <Flex 
            justify="space-between" 
            align="center"
            flexWrap="wrap"
            gap={4}
          >
            <VStack align="start" spacing={1}>
              <Heading 
                fontSize={{ base: '3xl', md: '4xl' }}
                fontWeight="extrabold"
                bgGradient="linear(to-r, blue.600, purple.600)" 
                bgClip="text"
                letterSpacing="tight"
              >
                –ú–æ–∏ –±–æ—Ç—ã
              </Heading>
              <Text color="gray.600" fontSize="lg">
                –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ Telegram –±–æ—Ç–∞–º–∏
              </Text>
            </VStack>
            
            <HStack spacing={3}>
              <Button
                size="lg"
                variant="outline"
                leftIcon={<Icon as={FiRefreshCw} />}
                onClick={loadBots}
                isLoading={loading}
                colorScheme="gray"
              >
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
              <Button
                as={RouterLink}
                to="/bots/new"
                leftIcon={<AddIcon />}
                colorScheme="blue"
                size="lg"
                bgGradient="linear(to-r, blue.500, purple.600)"
                _hover={{
                  bgGradient: "linear(to-r, blue.600, purple.700)",
                  transform: "translateY(-2px)",
                  boxShadow: "xl"
                }}
                transition="all 0.2s"
              >
                –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞
              </Button>
            </HStack>
          </Flex>

          {error && (
            <Alert status="error">
              <AlertIcon />
              {error}
            </Alert>
          )}

          {/* –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ */}
          {bots.length === 0 ? (
            <Card 
              bg={cardBg} 
              borderColor={borderColor}
              borderRadius="2xl"
              boxShadow="lg"
            >
              <CardBody textAlign="center" py={16}>
                <VStack spacing={6}>
                  <Flex
                    w={24}
                    h={24}
                    borderRadius="full"
                    bgGradient="linear(to-br, blue.400, purple.600)"
                    align="center"
                    justify="center"
                    mx="auto"
                  >
                    <Icon as={FiActivity} boxSize={12} color="white" />
                  </Flex>
                  <Heading size="lg" fontWeight="bold">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–æ—Ç–æ–≤</Heading>
                  <Text color="gray.600" fontSize="lg" maxW="md">
                    –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è Telegram –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
                  </Text>
                  <Button
                    as={RouterLink}
                    to="/templates"
                    colorScheme="purple"
                    size="lg"
                    leftIcon={<AddIcon />}
                    borderRadius="xl"
                    px={8}
                    h="56px"
                    _hover={{ transform: 'translateY(-2px)', shadow: 'xl' }}
                    transition="all 0.3s cubic-bezier(0.4, 0, 0.2, 1)"
                  >
                    –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω
                  </Button>
                </VStack>
              </CardBody>
            </Card>
          ) : (
            <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>
              {bots.map((bot, index) => (
                <Card
                  key={bot.id}
                  bg={cardBg}
                  borderWidth="1px"
                  borderColor={borderColor}
                  borderRadius="2xl"
                  boxShadow="md"
                  _hover={{ 
                    shadow: '0 20px 40px rgba(0,0,0,0.12)',
                    transform: 'translateY(-6px)',
                    borderColor: bot.status === 'running' ? 'green.400' : 'purple.400'
                  }}
                  transition="all 0.3s cubic-bezier(0.4, 0, 0.2, 1)"
                  position="relative"
                  overflow="hidden"
                  sx={{
                    animation: `fadeInUp 0.5s ease-out ${index * 0.1}s both`
                  }}
                >
                  <CardHeader pb={2}>
                    <HStack justify="space-between">
                      <VStack align="start" spacing={1}>
                        <Heading size="md">{bot.name}</Heading>
                        <Text fontSize="sm" color="gray.500">
                          @{bot.username}
                        </Text>
                      </VStack>
                      
                      <Menu>
                        <MenuButton
                          as={IconButton}
                          icon={<FiMoreVertical />}
                          variant="ghost"
                          size="sm"
                        />
                        <MenuList>
                          <MenuItem
                            icon={<ExternalLinkIcon />}
                            as="a"
                            href={bot.url}
                            target="_blank"
                          >
                            –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
                          </MenuItem>
                          <MenuItem
                            icon={<EditIcon />}
                            onClick={() => navigate(`/bots/edit/${bot.id}`)}
                          >
                            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                          </MenuItem>
                          <MenuItem
                            icon={<Icon as={FiBarChart2} />}
                            onClick={() => navigate(`/bots/${bot.id}/analytics`)}
                          >
                            –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                          </MenuItem>
                          {bot.status === 'running' && (
                            <MenuItem
                              icon={<Icon as={FiPause} />}
                              onClick={() => handleStopBot(bot.id)}
                            >
                              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                            </MenuItem>
                          )}
                          <MenuItem
                            icon={<DeleteIcon />}
                            color="red.500"
                            onClick={() => {
                              if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ "${bot.name}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`)) {
                                handleDeleteBot(bot.id);
                              }
                            }}
                          >
                            –£–¥–∞–ª–∏—Ç—å
                          </MenuItem>
                        </MenuList>
                      </Menu>
                    </HStack>
                  </CardHeader>

                  <CardBody pt={0}>
                    <VStack align="start" spacing={3}>
                      
                      {/* –°—Ç–∞—Ç—É—Å */}
                      <HStack>
                        {getStatusBadge(bot.status)}
                        {bot.pid && (
                          <Text fontSize="xs" color="gray.500">
                            PID: {bot.pid}
                          </Text>
                        )}
                      </HStack>

                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                      <VStack align="start" spacing={1} fontSize="sm">
                        <HStack>
                          <Text color="gray.600">–°—Ü–µ–Ω–∞—Ä–∏–µ–≤:</Text>
                          <Text fontWeight="bold">{bot.scenes}</Text>
                        </HStack>
                        <HStack>
                          <Text color="gray.600">–ó–∞–ø—É—â–µ–Ω:</Text>
                          <Text>{formatDate(bot.startedAt)}</Text>
                        </HStack>
                      </VStack>

                      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                      <HStack w="100%" spacing={2}>
                        <Button
                          size="sm"
                          colorScheme="blue"
                          variant="outline"
                          flex={1}
                          as="a"
                          href={bot.url}
                          target="_blank"
                          leftIcon={<ExternalLinkIcon />}
                        >
                          –û—Ç–∫—Ä—ã—Ç—å
                        </Button>
                        <IconButton
                          size="sm"
                          colorScheme="gray"
                          variant="outline"
                          aria-label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                          icon={<SettingsIcon />}
                          onClick={() => navigate(`/bots/edit/${bot.id}`)}
                        />
                      </HStack>

                    </VStack>
                  </CardBody>
                </Card>
              ))}
            </SimpleGrid>
          )}

        </VStack>
      </Container>

    </>
  );
};

export default BotListPage;