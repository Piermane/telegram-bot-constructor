import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardBody,
  CardHeader,
  Heading,
  Text,
  VStack,
  HStack,
  Badge,
  Button,
  useColorModeValue,
  Container,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  SimpleGrid,
  Icon,
  Spinner,
  Center,
  Alert,
  AlertIcon
} from '@chakra-ui/react';
import { FiClock, FiUsers, FiShoppingBag, FiHeadphones, FiBookOpen, FiBriefcase, FiSettings } from 'react-icons/fi';
import { Helmet } from 'react-helmet-async';
import { useNavigate } from 'react-router-dom';

interface Template {
  id: string;
  name: string;
  description: string;
  category: string;
  tags: string[];
  preview: string;
  features: string[];
  scenesCount: number;
  hasWebApp: boolean;
  hasPayment: boolean;
}

const TemplatesPage: React.FC = () => {
  const navigate = useNavigate();
  const [templates, setTemplates] = useState<Template[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  const cardBg = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  const categories = [
    { id: 'all', name: '–í—Å–µ —à–∞–±–ª–æ–Ω—ã', icon: FiSettings },
    { id: 'events', name: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', icon: FiClock },
    { id: 'ecommerce', name: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', icon: FiShoppingBag },
    { id: 'support', name: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', icon: FiHeadphones },
    { id: 'education', name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', icon: FiBookOpen },
    { id: 'business', name: '–ë–∏–∑–Ω–µ—Å', icon: FiBriefcase },
    { id: 'other', name: '–î—Ä—É–≥–æ–µ', icon: FiUsers }
  ];

  useEffect(() => {
    loadTemplates();
  }, []);

  const loadTemplates = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/templates');
      const data = await response.json();
      
      if (data.success) {
        setTemplates(data.templates);
      } else {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleUseTemplate = (template: Template) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º
    navigate(`/bots/new?template=${template.id}`);
  };

  const filteredTemplates = selectedCategory === 'all' 
    ? templates 
    : templates.filter(t => t.category === selectedCategory);

  const getCategoryColor = (category: string) => {
    const colors: Record<string, string> = {
      events: 'purple',
      ecommerce: 'green',
      support: 'blue',
      education: 'orange',
      business: 'teal',
      other: 'gray'
    };
    return colors[category] || 'gray';
  };

  if (loading) {
    return (
      <>
        <Helmet>
          <title>–®–∞–±–ª–æ–Ω—ã –±–æ—Ç–æ–≤ - TelegramBot Constructor</title>
        </Helmet>
        <Center h="400px">
          <VStack>
            <Spinner size="xl" color="blue.500" />
            <Text>–ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã...</Text>
          </VStack>
        </Center>
      </>
    );
  }

  if (error) {
    return (
      <>
        <Helmet>
          <title>–®–∞–±–ª–æ–Ω—ã –±–æ—Ç–æ–≤ - TelegramBot Constructor</title>
        </Helmet>
        <Container maxW="container.xl" py={8}>
          <Alert status="error">
            <AlertIcon />
            {error}
          </Alert>
        </Container>
      </>
    );
  }

  return (
    <>
      <Helmet>
        <title>–®–∞–±–ª–æ–Ω—ã –±–æ—Ç–æ–≤ - TelegramBot Constructor</title>
      </Helmet>

      <Container maxW="container.xl" py={8}>
        <VStack spacing={8} align="stretch">
          
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <Box textAlign="center">
            <Heading size="xl" mb={4}>üéØ –®–∞–±–ª–æ–Ω—ã –±–æ—Ç–æ–≤</Heading>
            <Text color="gray.600" fontSize="lg">
              –ì–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏.
            </Text>
          </Box>

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          <Tabs 
            variant="soft-rounded" 
            colorScheme="blue"
            onChange={(index) => setSelectedCategory(categories[index].id)}
          >
            <TabList justifyContent="center" flexWrap="wrap">
              {categories.map((category) => (
                <Tab key={category.id} mr={2} mb={2}>
                  <HStack>
                    <Icon as={category.icon} />
                    <Text>{category.name}</Text>
                  </HStack>
                </Tab>
              ))}
            </TabList>

            <TabPanels>
              <TabPanel px={0}>
                <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>
                  {filteredTemplates.map((template) => (
                    <Card 
                      key={template.id}
                      bg={cardBg}
                      borderColor={borderColor}
                      borderWidth="1px"
                      _hover={{ 
                        transform: 'translateY(-4px)', 
                        shadow: 'lg',
                        borderColor: 'blue.300'
                      }}
                      transition="all 0.2s"
                    >
                      <CardHeader pb={2}>
                        <VStack align="start" spacing={2}>
                          <HStack justify="space-between" w="100%">
                            <Heading size="md">{template.name}</Heading>
                            <Badge colorScheme={getCategoryColor(template.category)}>
                              {template.category}
                            </Badge>
                          </HStack>
                          
                          <Text color="gray.600" fontSize="sm">
                            {template.description}
                          </Text>
                        </VStack>
                      </CardHeader>

                      <CardBody pt={0}>
                        <VStack align="start" spacing={4}>
                          
                          {/* –ü—Ä–µ–≤—å—é */}
                          <Box
                            p={3}
                            bg="gray.50"
                            borderRadius="md"
                            fontSize="sm"
                            w="100%"
                            fontFamily="monospace"
                            whiteSpace="pre-line"
                          >
                            {template.preview}
                          </Box>

                          {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
                          <VStack align="start" spacing={2} w="100%">
                            <HStack>
                              <Text fontSize="sm" color="gray.600">–°—Ü–µ–Ω–∞—Ä–∏–µ–≤:</Text>
                              <Badge>{template.scenesCount}</Badge>
                            </HStack>
                            
                            {template.hasWebApp && (
                              <Badge colorScheme="purple" size="sm">üì± Web App</Badge>
                            )}
                            
                            {template.hasPayment && (
                              <Badge colorScheme="green" size="sm">üí≥ –û–ø–ª–∞—Ç–∞</Badge>
                            )}
                          </VStack>

                          {/* –¢–µ–≥–∏ —Ñ—É–Ω–∫—Ü–∏–π */}
                          <Box>
                            <Text fontSize="xs" color="gray.500" mb={1}>–§—É–Ω–∫—Ü–∏–∏:</Text>
                            <HStack flexWrap="wrap" spacing={1}>
                              {template.features.slice(0, 3).map((feature) => (
                                <Badge key={feature} size="sm" variant="outline">
                                  {feature}
                                </Badge>
                              ))}
                              {template.features.length > 3 && (
                                <Badge size="sm" variant="outline">
                                  +{template.features.length - 3}
                                </Badge>
                              )}
                            </HStack>
                          </Box>

                          {/* –ö–Ω–æ–ø–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è */}
                          <Button
                            colorScheme="blue"
                            size="sm"
                            w="100%"
                            onClick={() => handleUseTemplate(template)}
                          >
                            üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω
                          </Button>

                        </VStack>
                      </CardBody>
                    </Card>
                  ))}
                </SimpleGrid>
              </TabPanel>
            </TabPanels>
          </Tabs>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å –Ω—É–ª—è */}
          <Box
            p={6}
            bg="blue.50"
            borderRadius="lg"
            border="1px"
            borderColor="blue.200"
            textAlign="center"
          >
            <Heading size="md" mb={2}>üõ†Ô∏è –ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ?</Heading>
            <Text color="gray.600" mb={4}>
              –°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –Ω—É–ª—è –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
            </Text>
            <Button
              colorScheme="blue"
              variant="outline"
              onClick={() => navigate('/bots/new')}
            >
              –°–æ–∑–¥–∞—Ç—å —Å –Ω—É–ª—è
            </Button>
          </Box>

        </VStack>
      </Container>
    </>
  );
};

export default TemplatesPage;