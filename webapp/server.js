const https = require('https');
const fs = require('fs');
const path = require('path');
const url = require('url');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
function servePage(res, filename) {
  const filePath = path.join(__dirname, 'src', 'pages', filename);
  
  fs.readFile(filePath, (err, data) => {
    if (err) {
      console.error(`‚ùå Error reading ${filename}:`, err);
      res.writeHead(404, { 'Content-Type': 'text/plain' });
      res.end('Page not found');
      return;
    }
    
    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(data);
  });
}

// –¢–∏–ø—ã –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–æ–≤
const MENU_TEMPLATES = {
  restaurant_delivery: {
    title: 'üçï –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
    categories: [
      {
        name: 'üçï –ü–∏—Ü—Ü–∞',
        items: [
          { id: 'margherita', name: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', price: 890, emoji: 'üçï', description: '–¢–æ–º–∞—Ç—ã, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –±–∞–∑–∏–ª–∏–∫' },
          { id: 'pepperoni', name: '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏', price: 1190, emoji: 'üçï', description: '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏, —Å—ã—Ä, —Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å' },
          { id: 'four-cheese', name: '–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞', price: 1290, emoji: 'üßÄ', description: '–ì–æ—Ä–≥–æ–Ω–∑–æ–ª–∞, –ø–∞—Ä–º–µ–∑–∞–Ω, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, —Ä–∏–∫–æ—Ç—Ç–∞' },
          { id: 'meat-lovers', name: '–ú—è—Å–Ω–∞—è', price: 1490, emoji: 'ü•©', description: '–ë–µ–∫–æ–Ω, –ø–µ–ø–ø–µ—Ä–æ–Ω–∏, –∫–æ–ª–±–∞—Å–∞, –≤–µ—Ç—á–∏–Ω–∞' }
        ]
      },
      {
        name: 'üçù –ü–∞—Å—Ç–∞',
        items: [
          { id: 'carbonara', name: '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞', price: 790, emoji: 'üçù', description: '–ë–µ–∫–æ–Ω, —è–π—Ü–∞, –ø–∞—Ä–º–µ–∑–∞–Ω, —Å–ª–∏–≤–∫–∏' },
          { id: 'bolognese', name: '–ë–æ–ª–æ–Ω—å–µ–∑–µ', price: 890, emoji: 'üçù', description: '–ú—è—Å–Ω–æ–π —Å–æ—É—Å, —Ç–æ–º–∞—Ç—ã, –±–∞–∑–∏–ª–∏–∫' },
          { id: 'alfredo', name: '–ê–ª—å—Ñ—Ä–µ–¥–æ', price: 850, emoji: 'üçù', description: '–°–ª–∏–≤–æ—á–Ω—ã–π —Å–æ—É—Å, –ø–∞—Ä–º–µ–∑–∞–Ω, –∫—É—Ä–∏—Ü–∞' }
        ]
      },
      {
        name: 'ü•ó –°–∞–ª–∞—Ç—ã',
        items: [
          { id: 'caesar', name: '–¶–µ–∑–∞—Ä—å', price: 590, emoji: 'ü•ó', description: '–õ–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞, –∫—É—Ä–∏—Ü–∞, –ø–∞—Ä–º–µ–∑–∞–Ω, —Å—É—Ö–∞—Ä–∏–∫–∏' },
          { id: 'greek', name: '–ì—Ä–µ—á–µ—Å–∫–∏–π', price: 490, emoji: 'ü•ó', description: '–ü–æ–º–∏–¥–æ—Ä—ã, –æ–≥—É—Ä—Ü—ã, —Ñ–µ—Ç–∞, –æ–ª–∏–≤–∫–∏' }
        ]
      },
      {
        name: 'ü•§ –ù–∞–ø–∏—Ç–∫–∏',
        items: [
          { id: 'cola', name: '–ö–æ–ª–∞', price: 190, emoji: 'ü•§', description: '0.5–ª' },
          { id: 'water', name: '–í–æ–¥–∞', price: 90, emoji: 'üíß', description: '0.5–ª' },
          { id: 'juice', name: '–°–æ–∫ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π', price: 250, emoji: 'üçä', description: '0.3–ª' }
        ]
      }
    ]
  },

  electronics_store: {
    title: 'üì± –ö–∞—Ç–∞–ª–æ–≥ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
    categories: [
      {
        name: 'üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã',
        items: [
          { id: 'iphone15', name: 'iPhone 15', price: 79990, emoji: 'üì±', description: '128GB, –≤—Å–µ —Ü–≤–µ—Ç–∞' },
          { id: 'samsung-s24', name: 'Samsung Galaxy S24', price: 69990, emoji: 'üì±', description: '256GB, 5G' },
          { id: 'xiaomi-14', name: 'Xiaomi 14', price: 49990, emoji: 'üì±', description: '256GB, –∫–∞–º–µ—Ä–∞ 50MP' }
        ]
      },
      {
        name: 'üíª –ù–æ—É—Ç–±—É–∫–∏',
        items: [
          { id: 'macbook-air', name: 'MacBook Air M3', price: 129990, emoji: 'üíª', description: '8GB RAM, 256GB SSD' },
          { id: 'dell-xps', name: 'Dell XPS 13', price: 89990, emoji: 'üíª', description: '16GB RAM, 512GB SSD' }
        ]
      },
      {
        name: 'üéß –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
        items: [
          { id: 'airpods', name: 'AirPods Pro', price: 24990, emoji: 'üéß', description: '–®—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ, USB-C' },
          { id: 'watch', name: 'Apple Watch', price: 34990, emoji: '‚åö', description: 'GPS, 45mm' }
        ]
      }
    ]
  },

  fitness_club: {
    title: 'üí™ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
    categories: [
      {
        name: 'üèÉ‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è',
        items: [
          { id: 'morning-yoga', name: '–ô–æ–≥–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö', price: 0, emoji: 'üßò‚Äç‚ôÄÔ∏è', description: '08:00 - 09:00, –ó–∞–ª 1, –ê–Ω–Ω–∞' },
          { id: 'crossfit', name: 'CrossFit', price: 0, emoji: 'üèãÔ∏è‚Äç‚ôÇÔ∏è', description: '19:00 - 20:00, –ó–∞–ª 2, –ú–∞–∫—Å–∏–º' },
          { id: 'pilates', name: '–ü–∏–ª–∞—Ç–µ—Å', price: 0, emoji: 'ü§∏‚Äç‚ôÄÔ∏è', description: '20:00 - 21:00, –ó–∞–ª 1, –ï–ª–µ–Ω–∞' }
        ]
      },
      {
        name: 'üìÖ –ó–∞–≤—Ç—Ä–∞',
        items: [
          { id: 'strength', name: '–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', price: 0, emoji: 'üí™', description: '18:00 - 19:00, –ó–∞–ª 2, –î–º–∏—Ç—Ä–∏–π' },
          { id: 'zumba', name: 'Zumba', price: 0, emoji: 'üíÉ', description: '19:00 - 20:00, –ó–∞–ª 1, –ú–∞—Ä–∏—è' }
        ]
      }
    ]
  },

  medical_clinic: {
    title: 'üè• –ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á–∞–º',
    categories: [
      {
        name: 'üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–∏',
        items: [
          { id: 'therapist', name: '–¢–µ—Ä–∞–ø–µ–≤—Ç', price: 2500, emoji: 'üë®‚Äç‚öïÔ∏è', description: '–ò–≤–∞–Ω–æ–≤ –ò.–ò., –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–∏–µ–º: –∑–∞–≤—Ç—Ä–∞ 14:00' },
          { id: 'cardiologist', name: '–ö–∞—Ä–¥–∏–æ–ª–æ–≥', price: 3500, emoji: '‚ù§Ô∏è', description: '–ü–µ—Ç—Ä–æ–≤ –ü.–ü., –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–∏–µ–º: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00' },
          { id: 'dentist', name: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥', price: 3000, emoji: 'ü¶∑', description: '–°–∏–¥–æ—Ä–æ–≤ –°.–°., –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–∏–µ–º: —Å–µ–≥–æ–¥–Ω—è 16:00' }
        ]
      },
      {
        name: 'üß™ –ê–Ω–∞–ª–∏–∑—ã',
        items: [
          { id: 'blood-test', name: '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏', price: 800, emoji: 'üß™', description: '–ó–∞–±–æ—Ä –∫—Ä–æ–≤–∏: –ø–Ω-–ø—Ç 8:00-10:00' },
          { id: 'urine-test', name: '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏', price: 500, emoji: 'üß™', description: '–ü—Ä–∏–µ–º –∞–Ω–∞–ª–∏–∑–æ–≤: –ø–Ω-—Å–± 8:00-12:00' }
        ]
      }
    ]
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è WebApp
function generateWebAppHTML(botType, botName, botDescription, customContent = {}) {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  let menuData;
  if (customContent && Object.keys(customContent).length > 0) {
    menuData = {
      title: 'üé™ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
      categories: []
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏
    if (customContent.products && customContent.products.length > 0) {
      menuData.categories.push({
        name: 'üõçÔ∏è –¢–æ–≤–∞—Ä—ã/–£—Å–ª—É–≥–∏',
        items: customContent.products.map(product => ({
          id: product.id,
          name: product.name,
          price: product.price,
          emoji: product.emoji || '‚≠ê',
          description: product.description
        }))
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å—ã
    if (customContent.surveys && customContent.surveys.length > 0) {
      menuData.categories.push({
        name: 'üìä –û–ø—Ä–æ—Å—ã –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã',
        items: customContent.surveys.map(survey => ({
          id: survey.id,
          name: survey.title,
          price: survey.maxPoints,
          emoji: survey.emoji || 'üìä',
          description: survey.description,
          type: 'survey'
        }))
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (customContent.activities && customContent.activities.length > 0) {
      menuData.categories.push({
        name: 'üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∑–∞–¥–∞–Ω–∏—è',
        items: customContent.activities.map(activity => ({
          id: activity.id,
          name: activity.name,
          price: activity.points,
          emoji: activity.emoji || 'üéØ',
          description: activity.description,
          type: 'activity'
        }))
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if (customContent.schedule && customContent.schedule.length > 0) {
      menuData.categories.push({
        name: 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
        items: customContent.schedule.map(event => ({
          id: event.id,
          name: event.title,
          price: 0,
          emoji: 'üìÖ',
          description: `${event.speaker} ‚Ä¢ ${new Date(event.startTime).toLocaleString('ru')}`,
          type: 'event'
        }))
      });
    }
  } else {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    menuData = MENU_TEMPLATES[botType] || {
    title: 'üìã –£—Å–ª—É–≥–∏',
    categories: [
      {
        name: 'üî∏ –û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª—É–≥–∏',
        items: [
          { id: 'service1', name: '–£—Å–ª—É–≥–∞ 1', price: 1000, emoji: '‚≠ê', description: '–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ 1' },
          { id: 'service2', name: '–£—Å–ª—É–≥–∞ 2', price: 1500, emoji: '‚≠ê', description: '–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ 2' }
        ]
      }
    ]
    };
  }

  return `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${botName} - WebApp</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--tg-theme-bg-color, #ffffff);
            color: var(--tg-theme-text-color, #000000);
            padding: 0;
            overflow-x: hidden;
        }
        
        .header {
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            padding: 20px;
            text-align: center;
            border-bottom: 1px solid var(--tg-theme-hint-color, #e9ecef);
        }
        
        .header h1 {
            font-size: 20px;
            margin-bottom: 8px;
            color: var(--tg-theme-text-color);
        }
        
        .header p {
            color: var(--tg-theme-hint-color);
            font-size: 14px;
        }
        
        .container {
            padding: 20px;
        }
        
        .category {
            margin-bottom: 30px;
        }
        
        .category-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 15px;
            padding: 10px 0;
            color: var(--tg-theme-text-color);
            border-bottom: 2px solid var(--tg-theme-button-color, #3390ec);
        }
        
        .items-grid {
            display: grid;
            gap: 12px;
        }
        
        .item {
            background: var(--tg-theme-bg-color, #ffffff);
            border: 1px solid var(--tg-theme-hint-color, #e9ecef);
            border-radius: 12px;
            padding: 16px;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .item:hover, .item:active {
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        
        .item-emoji {
            font-size: 24px;
            width: 40px;
            text-align: center;
        }
        
        .item-info {
            flex: 1;
        }
        
        .item-name {
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 4px;
            color: var(--tg-theme-text-color);
        }
        
        .item-description {
            color: var(--tg-theme-hint-color);
            font-size: 12px;
            margin-bottom: 6px;
        }
        
        .item-price {
            font-weight: 600;
            color: var(--tg-theme-button-color, #3390ec);
            font-size: 14px;
        }
        
        .cart-counter {
            background: var(--tg-theme-button-color, #3390ec);
            color: var(--tg-theme-button-text-color, #ffffff);
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: 600;
        }
        
        .cart-info {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: var(--tg-theme-button-color, #3390ec);
            color: var(--tg-theme-button-text-color, #ffffff);
            padding: 16px 20px;
            display: none;
            align-items: center;
            justify-content: space-between;
            font-weight: 600;
        }
        
        .cart-info.show {
            display: flex;
        }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: var(--tg-theme-hint-color);
        }
        
        .empty-state-emoji {
            font-size: 48px;
            margin-bottom: 16px;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: var(--tg-theme-hint-color);
        }
    </style>
</head>
<body>
    <div class="header">
        <h1 id="bot-title">${botName}</h1>
        <p id="bot-description">${botDescription}</p>
    </div>

    <div class="container" id="content">
        ${menuData.categories.map(category => `
        <div class="category">
            <div class="category-title">${category.name}</div>
            <div class="items-grid">
                ${category.items.map(item => `
                <div class="item" data-item-id="${item.id}" data-price="${item.price}">
                    <div class="item-emoji">${item.emoji}</div>
                    <div class="item-info">
                        <div class="item-name">${item.name}</div>
                        <div class="item-description">${item.description}</div>
                        <div class="item-price">${item.price > 0 ? item.price + '‚ÇΩ' : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}</div>
                    </div>
                    <div class="cart-counter" id="counter-${item.id}" style="display: none;">0</div>
                </div>
                `).join('')}
            </div>
        </div>
        `).join('')}
    </div>

    <div class="cart-info" id="cart-info">
        <span id="cart-text">üõí –ö–æ—Ä–∑–∏–Ω–∞ ‚Ä¢ 0‚ÇΩ</span>
        <span>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</span>
    </div>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        const tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        let cart = {};
        let total = 0;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        document.addEventListener('click', (e) => {
            const item = e.target.closest('.item');
            if (!item) return;
            
            const itemId = item.dataset.itemId;
            const price = parseInt(item.dataset.price);
            const name = item.querySelector('.item-name').textContent;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
            if (cart[itemId]) {
                cart[itemId].quantity++;
            } else {
                cart[itemId] = {
                    name: name,
                    price: price,
                    quantity: 1
                };
            }
            
            updateUI();
            
            // –ê–Ω–∏–º–∞—Ü–∏—è
            tg.HapticFeedback.impactOccurred('light');
            item.style.transform = 'scale(0.98)';
            setTimeout(() => {
                item.style.transform = '';
            }, 100);
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        function updateUI() {
            total = 0;
            let itemCount = 0;
            
            // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
            document.querySelectorAll('.cart-counter').forEach(counter => {
                counter.style.display = 'none';
                counter.textContent = '0';
            });
            
            // –ü–æ–¥—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤
            Object.entries(cart).forEach(([itemId, item]) => {
                total += item.price * item.quantity;
                itemCount += item.quantity;
                
                const counter = document.getElementById('counter-' + itemId);
                if (counter) {
                    counter.style.display = 'flex';
                    counter.textContent = item.quantity;
                }
            });
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
            const cartInfo = document.getElementById('cart-info');
            const cartText = document.getElementById('cart-text');
            
            if (itemCount > 0) {
                cartInfo.classList.add('show');
                cartText.textContent = \`üõí –ö–æ—Ä–∑–∏–Ω–∞ (\${itemCount}) ‚Ä¢ \${total}‚ÇΩ\`;
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ Telegram
                tg.MainButton.setText(\`–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ä¢ \${total}‚ÇΩ\`);
                tg.MainButton.show();
            } else {
                cartInfo.classList.remove('show');
                tg.MainButton.hide();
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        tg.onEvent('mainButtonClicked', () => {
            const cartData = {
                action: 'checkout',
                items: cart,
                total: total,
                itemCount: Object.values(cart).reduce((sum, item) => sum + item.quantity, 0)
            };
            
            tg.sendData(JSON.stringify(cartData));
            tg.close();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ—Ä–∑–∏–Ω–µ
        document.getElementById('cart-info').addEventListener('click', () => {
            const cartData = {
                action: 'view_cart',
                items: cart,
                total: total
            };
            
            tg.sendData(JSON.stringify(cartData));
        });
        
        console.log('WebApp initialized for:', {
            botType: '${botType}',
            botName: '${botName}',
            categories: ${JSON.stringify(menuData.categories.length)}
        });
    </script>
</body>
</html>`;
}

// SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (—Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
const options = {
  key: fs.readFileSync(path.join(__dirname, 'ssl', 'key.pem')),
  cert: fs.readFileSync(path.join(__dirname, 'ssl', 'cert.pem'))
};

// –°–æ–∑–¥–∞–Ω–∏–µ HTTPS —Å–µ—Ä–≤–µ—Ä–∞
const server = https.createServer(options, (req, res) => {
  const parsedUrl = url.parse(req.url, true);
  const pathname = parsedUrl.pathname;
  const query = parsedUrl.query;

  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }

  // Professional Event Management pages
  if (pathname === '/dashboard') {
    servePage(res, 'dashboard.html');
  } else if (pathname === '/admin') {
    servePage(res, 'admin.html');
  } else if (pathname === '/schedule') {
    servePage(res, 'schedule.html');
  } else if (pathname === '/activities') {
    servePage(res, 'activities.html');
  } else if (pathname === '/qr-scanner') {
    servePage(res, 'qr-scanner.html');
  } else if (pathname === '/profile') {
    servePage(res, 'profile.html');
  } else if (pathname === '/shop') {
    servePage(res, 'shop.html');
  } else if (pathname === '/orders') {
    servePage(res, 'orders.html');
  } else if (pathname === '/') {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º WebApp –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const botType = query.type || 'universal';
    const botName = query.name || 'WebApp';
    const botDescription = query.description || '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª';
    
    // –ü–∞—Ä—Å–∏–º –≤–µ—Å—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    let customContent = {};
    if (query.content) {
      try {
        customContent = JSON.parse(decodeURIComponent(query.content));
      } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', e);
      }
    }
    
    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä products
    if (query.products && !customContent.products) {
      try {
        customContent.products = JSON.parse(decodeURIComponent(query.products));
      } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤:', e);
      }
    }

    const html = generateWebAppHTML(botType, botName, botDescription, customContent);

    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(html);
  } else if (pathname === '/health') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ status: 'OK', timestamp: new Date().toISOString() }));
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

const PORT = process.env.WEBAPP_PORT || 8443;

server.listen(PORT, () => {
  console.log(`üåê WebApp HTTPS server running on https://localhost:${PORT}`);
  console.log(`üì± Telegram WebApp –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
server.on('error', (err) => {
  console.error('‚ùå WebApp server error:', err);
});

process.on('SIGTERM', () => {
  console.log('üõë WebApp server stopping...');
  server.close();
});

process.on('SIGINT', () => {
  console.log('üõë WebApp server stopping...');
  server.close();
  process.exit(0);
});
